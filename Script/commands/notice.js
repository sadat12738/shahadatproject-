const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");

module.exports.config = {
 name: "notice",
 version: "1.0.0",
 hasPermssion: 2, 
 credits: "ЁЭРТЁЭРЗЁЭРАЁЭРЗЁЭРАЁЭРГЁЭРАЁЭРУ",
 description: "рж╕ржХрж▓ ржЧрзНрж░рзБржкрзЗ ржирзЛржЯрж┐рж╢ ржкрж╛ржарж╛ржи (ржЯрзЗржХрзНрж╕ржЯ, ржЗржорзЗржЬ, ржнрж┐ржбрж┐ржУ, ржЕржбрж┐ржУ, ржлрж╛ржЗрж▓ рж╕рж╣)",
 commandCategory: "Admin",
 usages: "/notice <ржЯрзЗржХрзНрж╕ржЯ> ржмрж╛ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐ржпрж╝рзЗ ржорзЗрж╕рзЗржЬ ржжрж┐ржи",
 cooldowns: 5,
};

module.exports.run = async ({ api, event, args, Users }) => {
 try {
 const allThreads = global.data.allThreadID || [];
 const senderName = await Users.getNameUser(event.senderID);
 let successCount = 0;
 let failedCount = 0;

 if (event.type === "message_reply") {
 const replyMsg = event.messageReply;
 const attachments = replyMsg.attachments || [];

 
 for (const attachment of attachments) {
 const fileUrl = attachment.url;
 const fileName = path.basename(fileUrl);
 const filePath = path.join(__dirname, `cache/${fileName}`);

 try {
 
 const response = await axios.get(fileUrl, { responseType: "arraybuffer" });
 await fs.writeFile(filePath, Buffer.from(response.data, "binary"));

 
 for (const threadID of allThreads) {
 if (threadID != event.threadID) { 
 try {
 await api.sendMessage(
 {
 body: `ЁЯУв ржирзЛржЯрж┐рж╢ From Admin: (${senderName})\n\n${replyMsg.body || args.join(" ")}`,
 attachment: fs.createReadStream(filePath),
 },
 threadID
 );
 successCount++;
 } catch (error) {
 failedCount++;
 console.error(`Failed to send to ${threadID}:`, error);
 }
 await new Promise((resolve) => setTimeout(resolve, 1000)); // Rate limit ржПржбрж╝рж╛ржирзЛрж░ ржЬржирзНржп
 }
 }

 
 await fs.unlink(filePath);
 } catch (error) {
 console.error("File download/send error:", error);
 api.sendMessage("тЭМ ржлрж╛ржЗрж▓ ржкрж╛ржарж╛ржирзЛрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!", event.threadID);
 }
 }
 } 
 
 else if (args.length > 0) {
 const noticeText = args.join(" ");

 for (const threadID of allThreads) {
 if (threadID != event.threadID) {
 try {
 await api.sendMessage(
 `ЁЯУв ржирзЛржЯрж┐рж╢ (${senderName}):\n${noticeText}`,
 threadID
 );
 successCount++;
 } catch (error) {
 failedCount++;
 console.error(`Failed to send to ${threadID}:`, error);
 }
 await new Promise((resolve) => setTimeout(resolve, 500)); // Rate limit ржПржбрж╝рж╛ржирзЛрж░ ржЬржирзНржп
 }
 }
 } else {
 return api.sendMessage(
 "тД╣я╕П ржмрзНржпржмрж╣рж╛рж░:\nтАв `/notice <ржЯрзЗржХрзНрж╕ржЯ>`\nтАв ржмрж╛ ржХрзЛржирзЛ ржорзЗрж╕рзЗржЬ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрж┐ржпрж╝рзЗ `/notice` рж▓рж┐ржЦрзБржи",
 event.threadID
 );
 }

 api.sendMessage(
 `тЬЕ ${successCount} ржЯрж┐ ржЧрзНрж░рзБржкрзЗ ржирзЛржЯрж┐рж╢ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!\nтЭМ ${failedCount} ржЯрж┐ ржЧрзНрж░рзБржкрзЗ ржкрж╛ржарж╛ржирзЛ ржпрж╛ржпрж╝ржирж┐ред`,
 event.threadID
 );
 } catch (error) {
 console.error("Global error:", error);
 api.sendMessage("тЭМ ржирзЛржЯрж┐рж╢ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!", event.threadID);
 }
};